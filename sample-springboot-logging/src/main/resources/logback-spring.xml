<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">

    <!-- 환경 설정 -->
    <property name="LOG_DIR" value="${user.home}/logs/app" />
    <property name="LOG_PATH" value="${LOG_DIR}/app.log"/>

    <!-- springboot 기본 로깅파일 삽입 -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!-- include를 통해 환경별로 로깅 파일을 삽입해도 좋은 방법 -->
    <!-- <include resource="logback.${profile}.xml"/> -->

    <!-- 콘솔창 로깅 출력 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <withJansi>true</withJansi>
        <encoder>
            <Pattern>%d{yyyy-MMM-dd HH:mm:ss.SSS}[%-5level [%thread] %logger{15}.%M\(%line\) - %msg%n</Pattern>
        </encoder>
    </appender>

    <!-- 롤링 로깅 출력(파일) -->
    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 파일 경로 -->
        <file>./logs/application.log</file>
        <!-- <file>${LOG_PATH}</file> -->

        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- rollover daily -->
            <fileNamePattern>./logs/application-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize><!-- 한 파일당 최대 용량 -->
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory><!-- 최대 보관 기간 -->
        </rollingPolicy>

        <!-- 출력 패턴 -->
        <encoder>
            <pattern>%date{ISO8601} %-5level %logger{32} - %msg%n</pattern>
            <!-- pattern
                %d{yyyy-MM-dd HH:mm:ss} : 년월일 시분초
                %data{ISO8601} : 날짜 출력양식
                %thread : 쓰레드명
                %-5level : 로그 레벨, -5는 출력 고정폭 값
                %logger{length} : 로거 이름, {length}는 자리수
                %msg : 로거 메세지, $message의 alias
                %n : 줄바꿈
                %highlight : log level별로 color가 다르게 출력
                ${PID:-} : 프로세스 아이디
                %d : 로그 기록시간
                %p : 로깅 레벨
                %F : 로깅이 발생한 프로그램 파일명
                %M : 로깅일 발생한 메소드의 이름
                %l : 로깅이 발생한 호출지의 정보
                %L : 로깅이 발생한 호출지의 라인 수
                %t : 쓰레드 명
                %c : 로깅이 발생한 카테고리
                %C : 로깅이 발생한 클래스 명
                %m : 로그 메시지
                %r : 애플리케이션 시작 이후부터 로깅이 발생한 시점까지의 시간
            -->
        </encoder>
    </appender>

    <appender name="EVENT_QUEUE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>./queue/event-queue.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- rollover daily -->
            <fileNamePattern>./queue/event-queue-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%date{ISO8601} - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="SLACK" class="com.github.maricn.logback.SlackAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%-4relative [%thread] %-5level %class - %msg%n</pattern>
        </layout>
        <webhookUri>https://hooks.slack.com/services/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</webhookUri>
        <username>sample-springboot-logger</username>
        <iconEmoji>:stuck_out_tongue_winking_eye:</iconEmoji>
        <colorCoding>true</colorCoding>
    </appender>


    <!--다른 로깅 파일을 삽입 -->
    <!-- include resource="logback-defaults.xml"/ -->

    <!-- 프로퍼티를 설정하여 사용 -->
    <!-- ${LOG_LEVEL}을 사용할 경우 application.properties에서 logger.log.level=INFO를 설정을 사용-->
    <!-- property name="ROOT_LOG_LEVEL" value="INFO"/ -->

    <!-- name은 package 혹은 logger name을 사용 -->
    <logger name="root" level="WARN" />
    <logger name="org.springframework" level="ERROR" />
    <logger name="io.simpolor" level="DEBUG" />

    <!-- level 지정과, appender-ref를 할 경우 2가지 방식으로 출력이 가능 -->
    <logger name="event-log" level="DEBUG">
        <appender-ref ref="EVENT_QUEUE" />
        <appender-ref ref="SLACK" />
    </logger>

    <!-- 환경별로 로깅 레벨을 설정이 가능 -->
    <springProfile name="!live">
        <logger name="io.simpolor" level="DEBUG" />
        <root level="DEBUG">
            <appender-ref ref="STDOUT" />
        </root>
        <root level="ERROR">
            <appender-ref ref="ROLLING"/>
        </root>
    </springProfile>

    <springProfile name="live">
        <logger name="io.simpolor" level="ERROR" />
        <root level="ERROR">
            <appender-ref ref="ROLLING" />
        </root>
    </springProfile>

</configuration>